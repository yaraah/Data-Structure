class TrieNode
{
  TrieNode[] Link;
  int NumOfChar=26;
  boolean isEnd;
  public TrieNode()
  {
    Link=new TrieNode[R];
  }
  public TrieNode get(char ch)
  {
    return Link[ch - 'a'];
  }
  public TrieNode ContainsKey(char ch)
  {
    return Link[ch - 'a']!=null;
  }
  public void put(char ch,TrieNode Node)
  {
    Link[ch - 'a']=Node;
  }
  public boolean isEnd()
  {
    return isEnd;
  }
  public void SetEnd()
  {
    isEnd=true;
  }
}
class Trie
{
  TrieNode root;
  public Trie()
  {
    root=new TrieNode();
  }
  public void insert(char ch)
  {
    TrieNode Startingnode=root;
    for(int i=0;i<word.length();i++)
    {
      char Currentchar=word.charAt(i);
      if(!Startingnode.ContainsKey(Currentchar))
      {
        Startingnode.put(Currentchar,new TrieNode());
      }
      Startingnode=Startingnode.get(Currentchar);
      
    }
    Startingnode.SetEnd();
  }
  
  public TrieNode search()
  {
  }
}
